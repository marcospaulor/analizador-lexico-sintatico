
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AND_ASSIGN ARROW ASSERT ASSIGN AT BACKSPACE BELL BITWISE_AND BITWISE_COMPLEMENT BITWISE_NOT BITWISE_OR BITWISE_XOR BOOLEAN BREAK BYTE CARRIAGE_RETURN CASE CATCH CHAR CHARACTER CLASS COLON COMMA COMMENT CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE DOUBLE_COLON ELLIPSIS ELSE ENUM EOF EQ EQ_ASSIGN ERROR ESCAPE EXTENDS FALSE FINAL FINALLY FLOAT FOR FORM_FEED GE GOTO GT ID IF IMPLEMENTS IMPORT INCREMENT INSTANCEOF INT INTEGER INTERFACE LAMBDA LBRACE LBRACKET LE LEFT_SHIFT LEFT_SHIFT_ASSIGN LENGTH LINE_COMMENT LONG LPAREN LT MINUS MINUS_ASSIGN MINUS_MINUS MOD MOD_ASSIGN NATIVE NE NEW NEWLINE NON_SEALED NOT NULL OR OR_ASSIGN OUT PACKAGE PERMITS PLUS PLUS_ASSIGN PLUS_PLUS PRINTLN PRIVATE PROTECTED PUBLIC QUESTION_MARK RBRACE RBRACKET RECORD RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGN RIGHT_SHIFT_UNSIGNED RIGHT_SHIFT_UNSIGNED_ASSIGN RPAREN SEALED SEMICOLON SHORT SPACE STATIC STRICTFP STRING SUPER SWITCH SYNCHRONIZED SYSTEM TAB THIS THROW THROWS TILDE TIMES TIMES_ASSIGN TRANSIENT TRUE TRY TYPE UNDERSCORE UNSIGNED_RIGHT_SHIFT UNSIGNED_RIGHT_SHIFT_ASSIGN VAR VERTICAL_TAB VOID VOLATILE WHILE XOR XOR_ASSIGN YIELDprogram : class_decl_listclass_decl_list : class_decl class_decl_list\n                           | class_decl\n            class_decl : CLASS ID EXTENDS ID LBRACE class_body RBRACE\n                       | CLASS ID LBRACE class_body RBRACE\n        class_body : class_body class_member\n                      | class_memberclass_member : var_decl\n                        var_decl : type ID SEMICOLONvar_decl_list : var_decl_list var_decl\n                         | emptytype : LBRACKET INT RBRACKET\n                | INT\n                | BOOLEAN\n                | IDempty :'
    
_lr_action_items = {'CLASS':([0,3,19,26,],[4,4,-5,-4,]),'$end':([1,2,3,5,19,26,],[0,-1,-3,-2,-5,-4,]),'ID':([4,7,8,10,11,12,13,14,16,17,18,20,23,24,25,],[6,9,10,-15,10,-7,-8,21,-13,-14,10,-6,10,-9,-12,]),'EXTENDS':([6,],[7,]),'LBRACE':([6,9,],[8,18,]),'LBRACKET':([8,11,12,13,18,20,23,24,],[15,15,-7,-8,15,-6,15,-9,]),'INT':([8,11,12,13,15,18,20,23,24,],[16,16,-7,-8,22,16,-6,16,-9,]),'BOOLEAN':([8,11,12,13,18,20,23,24,],[17,17,-7,-8,17,-6,17,-9,]),'RBRACE':([11,12,13,20,23,24,],[19,-7,-8,-6,26,-9,]),'SEMICOLON':([21,],[24,]),'RBRACKET':([22,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_decl_list':([0,3,],[2,5,]),'class_decl':([0,3,],[3,3,]),'class_body':([8,18,],[11,23,]),'class_member':([8,11,18,23,],[12,20,12,20,]),'var_decl':([8,11,18,23,],[13,13,13,13,]),'type':([8,11,18,23,],[14,14,14,14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_decl_list','program',1,'p_program','Parser.py',25),
  ('class_decl_list -> class_decl class_decl_list','class_decl_list',2,'p_class_decl_list','Parser.py',30),
  ('class_decl_list -> class_decl','class_decl_list',1,'p_class_decl_list','Parser.py',31),
  ('class_decl -> CLASS ID EXTENDS ID LBRACE class_body RBRACE','class_decl',7,'p_class_decl','Parser.py',40),
  ('class_decl -> CLASS ID LBRACE class_body RBRACE','class_decl',5,'p_class_decl','Parser.py',41),
  ('class_body -> class_body class_member','class_body',2,'p_class_body','Parser.py',50),
  ('class_body -> class_member','class_body',1,'p_class_body','Parser.py',51),
  ('class_member -> var_decl','class_member',1,'p_class_member','Parser.py',59),
  ('var_decl -> type ID SEMICOLON','var_decl',3,'p_var_decl','Parser.py',65),
  ('var_decl_list -> var_decl_list var_decl','var_decl_list',2,'p_var_decl_list','Parser.py',72),
  ('var_decl_list -> empty','var_decl_list',1,'p_var_decl_list','Parser.py',73),
  ('type -> LBRACKET INT RBRACKET','type',3,'p_type','Parser.py',83),
  ('type -> INT','type',1,'p_type','Parser.py',84),
  ('type -> BOOLEAN','type',1,'p_type','Parser.py',85),
  ('type -> ID','type',1,'p_type','Parser.py',86),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',94),
]
