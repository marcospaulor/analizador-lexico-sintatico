
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOLEAN CLASS COMMA DIVIDE DOT ELSE EQUAL EQUALS EXTENDS FALSE FOR GREATER_THAN GREATER_THAN_OR_EQUAL ID IF IMPORT INT INT_LITERAL LBRACE LESS_THAN LESS_THAN_OR_EQUAL LPAREN LSQUARE MAIN MINUS MINUS_MINUS NEW NOT NOT_EQUALS OR OUT PLUS PLUS_PLUS PRINTLN PRIVATE PROTECTED PUBLIC RBRACE RETURN RPAREN RSQUARE SEMICOLON STATIC STRING STRING_LITERAL SYSTEM THIS TIMES TRUE VOID WHILE\n            program : body_program\n        \n            body_program : class_decl body_program\n                | import_decl body_program\n                | var_decl body_program\n                | empty\n        \n            class_decl : CLASS ID EXTENDS ID LBRACE body RBRACE\n                | CLASS ID LBRACE body RBRACE\n                | access_modifier CLASS ID EXTENDS ID LBRACE body RBRACE\n                | access_modifier CLASS ID LBRACE body RBRACE\n        \n            access_modifier : PUBLIC\n                | PRIVATE\n                | PROTECTED\n        \n            import_decl : IMPORT ID DOT ID SEMICOLON\n                | IMPORT ID DOT ID DOT ID SEMICOLON\n        \n            var_decl : type ID SEMICOLON\n                | type ID EQUAL expr SEMICOLON\n        \n            method_decl : type ID LPAREN params RPAREN LBRACE body RBRACE\n                        | access_modifier type ID LPAREN params RPAREN LBRACE body RBRACE\n                        | type ID LPAREN RPAREN LBRACE body RBRACE\n                        | access_modifier STATIC type ID LPAREN params RPAREN LBRACE body RBRACE\n                        | PUBLIC STATIC VOID MAIN LPAREN params RPAREN LBRACE body RBRACE\n        \n            params : type ID\n                | type ID COMMA params\n                | empty\n        \n            body : var_decl body\n                | method_decl body\n                | statement body\n                | empty\n        \n            type : INT\n                | BOOLEAN\n                | STRING\n                | ID\n                | VOID\n                | type LSQUARE RSQUARE\n        \n            expr : expr PLUS term\n                | expr MINUS term\n                | expr AND term\n                | expr OR term\n                | expr EQUALS term\n                | expr NOT_EQUALS term\n                | expr LESS_THAN term\n                | expr LESS_THAN_OR_EQUAL term\n                | expr GREATER_THAN term\n                | expr GREATER_THAN_OR_EQUAL term\n                | term\n        \n            term : term TIMES factor\n                | term DIVIDE factor\n                | factor\n        \n            factor : MINUS factor\n                | NOT factor\n                | INT_LITERAL\n                | TRUE\n                | FALSE\n                | STRING_LITERAL\n                | ID\n                | ID LSQUARE expr RSQUARE\n                | ID DOT ID\n                | ID DOT ID LPAREN args RPAREN\n                | ID LPAREN args RPAREN\n                | NEW ID LPAREN RPAREN\n                | NEW INT LSQUARE expr RSQUARE\n                | LPAREN expr RPAREN\n        \n            args : expr\n                | expr COMMA args\n                | empty\n        \n            statement : LBRACE body RBRACE\n                | IF LPAREN expr RPAREN statement ELSE statement\n                | IF LPAREN expr RPAREN statement\n                | WHILE LPAREN expr RPAREN statement\n                | SYSTEM DOT OUT DOT PRINTLN LPAREN expr RPAREN SEMICOLON\n                | ID EQUALS expr SEMICOLON\n                | ID LSQUARE expr RSQUARE EQUALS expr SEMICOLON\n                | ID DOT ID EQUALS expr SEMICOLON\n                | ID DOT ID LPAREN args RPAREN SEMICOLON\n                | ID LPAREN args RPAREN SEMICOLON\n                | RETURN expr SEMICOLON\n                | RETURN SEMICOLON\n                | ID PLUS_PLUS SEMICOLON\n                | ID MINUS_MINUS SEMICOLON\n                | PLUS_PLUS ID SEMICOLON\n                | MINUS_MINUS ID SEMICOLON\n                | ID PLUS_PLUS\n                | ID MINUS_MINUS\n                | PLUS_PLUS ID\n                | MINUS_MINUS ID\n                | THIS DOT ID EQUAL expr SEMICOLON\n                | THIS DOT ID LPAREN args RPAREN SEMICOLON\n        empty :'
    
_lr_action_items = {'CLASS':([0,3,4,5,9,12,13,14,31,75,94,98,138,158,178,201,],[7,7,7,7,23,-10,-11,-12,-15,-7,-13,-16,-9,-6,-14,-8,]),'IMPORT':([0,3,4,5,31,75,94,98,138,158,178,201,],[10,10,10,10,-15,-7,-13,-16,-9,-6,-14,-8,]),'$end':([0,1,2,3,4,5,6,19,20,21,31,75,94,98,138,158,178,201,],[-88,0,-1,-88,-88,-88,-5,-2,-3,-4,-15,-7,-13,-16,-9,-6,-14,-8,]),'PUBLIC':([0,3,4,5,28,31,36,38,39,40,53,67,72,73,75,87,88,89,94,98,123,124,125,133,134,135,137,138,158,159,178,187,191,195,197,201,205,208,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[12,12,12,12,44,-15,44,44,44,44,44,44,-82,-83,-7,-77,-84,-85,-13,-16,-78,-79,-66,-76,-80,-81,44,-9,-6,-71,-14,-75,44,-68,-69,-8,-73,44,-86,-72,-74,-19,44,-67,-87,-17,44,44,-18,-70,-20,-21,]),'PRIVATE':([0,3,4,5,28,31,36,38,39,40,53,67,72,73,75,87,88,89,94,98,123,124,125,133,134,135,137,138,158,159,178,187,191,195,197,201,205,208,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[13,13,13,13,13,-15,13,13,13,13,13,13,-82,-83,-7,-77,-84,-85,-13,-16,-78,-79,-66,-76,-80,-81,13,-9,-6,-71,-14,-75,13,-68,-69,-8,-73,13,-86,-72,-74,-19,13,-67,-87,-17,13,13,-18,-70,-20,-21,]),'PROTECTED':([0,3,4,5,28,31,36,38,39,40,53,67,72,73,75,87,88,89,94,98,123,124,125,133,134,135,137,138,158,159,178,187,191,195,197,201,205,208,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[14,14,14,14,14,-15,14,14,14,14,14,14,-82,-83,-7,-77,-84,-85,-13,-16,-78,-79,-66,-76,-80,-81,14,-9,-6,-71,-14,-75,14,-68,-69,-8,-73,14,-86,-72,-74,-19,14,-67,-87,-17,14,14,-18,-70,-20,-21,]),'INT':([0,3,4,5,13,14,28,31,36,38,39,40,43,44,53,66,67,72,73,75,81,87,88,89,94,98,123,124,125,126,133,134,135,137,138,158,159,169,178,187,191,193,194,195,197,201,205,207,208,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[15,15,15,15,-11,-12,15,-15,15,15,15,15,15,-10,15,115,15,-82,-83,-7,15,-77,-84,-85,-13,-16,-78,-79,-66,15,-76,-80,-81,15,-9,-6,-71,15,-14,-75,15,15,15,-68,-69,-8,-73,15,15,-86,-72,-74,-19,15,-67,-87,-17,15,15,-18,-70,-20,-21,]),'BOOLEAN':([0,3,4,5,13,14,28,31,36,38,39,40,43,44,53,67,72,73,75,81,87,88,89,94,98,123,124,125,126,133,134,135,137,138,158,159,169,178,187,191,193,194,195,197,201,205,207,208,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[16,16,16,16,-11,-12,16,-15,16,16,16,16,16,-10,16,16,-82,-83,-7,16,-77,-84,-85,-13,-16,-78,-79,-66,16,-76,-80,-81,16,-9,-6,-71,16,-14,-75,16,16,16,-68,-69,-8,-73,16,16,-86,-72,-74,-19,16,-67,-87,-17,16,16,-18,-70,-20,-21,]),'STRING':([0,3,4,5,13,14,28,31,36,38,39,40,43,44,53,67,72,73,75,81,87,88,89,94,98,123,124,125,126,133,134,135,137,138,158,159,169,178,187,191,193,194,195,197,201,205,207,208,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[17,17,17,17,-11,-12,17,-15,17,17,17,17,17,-10,17,17,-82,-83,-7,17,-77,-84,-85,-13,-16,-78,-79,-66,17,-76,-80,-81,17,-9,-6,-71,17,-14,-75,17,17,17,-68,-69,-8,-73,17,17,-86,-72,-74,-19,17,-67,-87,-17,17,17,-18,-70,-20,-21,]),'ID':([0,3,4,5,7,8,10,11,13,14,15,16,17,18,23,27,28,30,31,32,33,35,36,38,39,40,42,43,44,48,49,50,52,53,58,60,65,66,67,68,69,70,71,72,73,75,80,81,83,84,87,88,89,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,123,124,125,126,128,133,134,135,137,138,157,158,159,161,162,164,165,169,172,173,175,176,178,180,184,187,191,193,194,195,197,201,205,207,208,213,214,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[8,8,8,8,22,-32,24,25,-11,-12,-29,-30,-31,-33,29,34,35,54,-15,55,-34,-32,35,35,35,35,79,8,-10,55,88,89,91,35,55,55,55,114,35,55,55,119,55,-82,-83,-7,127,8,55,55,-77,-84,-85,136,139,-13,55,141,55,-16,55,55,55,55,55,55,55,55,55,55,55,55,-78,-79,-66,8,170,-76,-80,-81,35,-9,55,-6,-71,55,55,55,189,8,196,196,55,55,-14,55,55,-75,35,8,8,-68,-69,-8,-73,8,35,196,55,-86,-72,-74,-19,35,-67,-87,-17,35,35,-18,-70,-20,-21,]),'VOID':([0,3,4,5,13,14,28,31,36,38,39,40,43,44,53,67,72,73,75,81,82,87,88,89,94,98,123,124,125,126,133,134,135,137,138,158,159,169,178,187,191,193,194,195,197,201,205,207,208,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[18,18,18,18,-11,-12,18,-15,18,18,18,18,18,-10,18,18,-82,-83,-7,18,129,-77,-84,-85,-13,-16,-78,-79,-66,18,-76,-80,-81,18,-9,-6,-71,18,-14,-75,18,18,18,-68,-69,-8,-73,18,18,-86,-72,-74,-19,18,-67,-87,-17,18,18,-18,-70,-20,-21,]),'LSQUARE':([8,11,15,16,17,18,33,35,42,55,80,115,128,165,196,],[-32,26,-29,-30,-31,-33,-34,69,26,95,26,157,26,26,69,]),'STATIC':([13,14,43,44,],[-11,-12,81,82,]),'EXTENDS':([22,29,],[27,52,]),'LBRACE':([22,28,29,31,34,36,38,39,40,53,67,72,73,87,88,89,91,98,123,124,125,133,134,135,137,159,167,172,173,187,190,191,195,197,205,208,210,213,215,218,219,222,223,224,225,226,228,229,231,232,234,237,238,239,],[28,36,53,-15,67,36,36,36,36,36,36,-82,-83,-77,-84,-85,137,-16,-78,-79,-66,-76,-80,-81,36,-71,191,36,36,-75,208,36,-68,-69,-73,36,223,36,-86,-72,-74,-19,36,231,232,-67,-87,-17,36,36,-18,-70,-20,-21,]),'DOT':([24,35,47,51,54,55,132,196,],[30,70,85,90,93,96,174,70,]),'SEMICOLON':([25,48,54,55,56,57,59,61,62,63,64,72,73,79,86,88,89,111,112,117,139,141,143,144,145,146,147,148,149,150,151,152,153,154,155,163,179,181,182,185,199,203,204,206,216,217,233,],[31,87,94,-55,98,-45,-48,-51,-52,-53,-54,123,124,31,133,134,135,-49,-50,159,178,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,187,-56,-59,-60,205,215,-61,218,219,228,-58,237,]),'EQUAL':([25,79,136,],[32,32,175,]),'RSQUARE':([26,55,57,59,61,62,63,64,111,112,118,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,203,217,],[33,-55,-45,-48,-51,-52,-53,-54,-49,-50,160,179,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,203,-61,-58,]),'IF':([28,31,36,38,39,40,53,67,72,73,87,88,89,98,123,124,125,133,134,135,137,159,172,173,187,191,195,197,205,208,213,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[45,-15,45,45,45,45,45,45,-82,-83,-77,-84,-85,-16,-78,-79,-66,-76,-80,-81,45,-71,45,45,-75,45,-68,-69,-73,45,45,-86,-72,-74,-19,45,-67,-87,-17,45,45,-18,-70,-20,-21,]),'WHILE':([28,31,36,38,39,40,53,67,72,73,87,88,89,98,123,124,125,133,134,135,137,159,172,173,187,191,195,197,205,208,213,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[46,-15,46,46,46,46,46,46,-82,-83,-77,-84,-85,-16,-78,-79,-66,-76,-80,-81,46,-71,46,46,-75,46,-68,-69,-73,46,46,-86,-72,-74,-19,46,-67,-87,-17,46,46,-18,-70,-20,-21,]),'SYSTEM':([28,31,36,38,39,40,53,67,72,73,87,88,89,98,123,124,125,133,134,135,137,159,172,173,187,191,195,197,205,208,213,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[47,-15,47,47,47,47,47,47,-82,-83,-77,-84,-85,-16,-78,-79,-66,-76,-80,-81,47,-71,47,47,-75,47,-68,-69,-73,47,47,-86,-72,-74,-19,47,-67,-87,-17,47,47,-18,-70,-20,-21,]),'RETURN':([28,31,36,38,39,40,53,67,72,73,87,88,89,98,123,124,125,133,134,135,137,159,172,173,187,191,195,197,205,208,213,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[48,-15,48,48,48,48,48,48,-82,-83,-77,-84,-85,-16,-78,-79,-66,-76,-80,-81,48,-71,48,48,-75,48,-68,-69,-73,48,48,-86,-72,-74,-19,48,-67,-87,-17,48,48,-18,-70,-20,-21,]),'PLUS_PLUS':([28,31,35,36,38,39,40,53,67,72,73,87,88,89,98,123,124,125,133,134,135,137,159,172,173,187,191,195,196,197,205,208,213,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[49,-15,72,49,49,49,49,49,49,-82,-83,-77,-84,-85,-16,-78,-79,-66,-76,-80,-81,49,-71,49,49,-75,49,-68,72,-69,-73,49,49,-86,-72,-74,-19,49,-67,-87,-17,49,49,-18,-70,-20,-21,]),'MINUS_MINUS':([28,31,35,36,38,39,40,53,67,72,73,87,88,89,98,123,124,125,133,134,135,137,159,172,173,187,191,195,196,197,205,208,213,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[50,-15,73,50,50,50,50,50,50,-82,-83,-77,-84,-85,-16,-78,-79,-66,-76,-80,-81,50,-71,50,50,-75,50,-68,73,-69,-73,50,50,-86,-72,-74,-19,50,-67,-87,-17,50,50,-18,-70,-20,-21,]),'THIS':([28,31,36,38,39,40,53,67,72,73,87,88,89,98,123,124,125,133,134,135,137,159,172,173,187,191,195,197,205,208,213,215,218,219,222,223,226,228,229,231,232,234,237,238,239,],[51,-15,51,51,51,51,51,51,-82,-83,-77,-84,-85,-16,-78,-79,-66,-76,-80,-81,51,-71,51,51,-75,51,-68,-69,-73,51,51,-86,-72,-74,-19,51,-67,-87,-17,51,51,-18,-70,-20,-21,]),'RBRACE':([28,31,36,37,38,39,40,41,53,67,72,73,74,76,77,78,87,88,89,92,98,116,123,124,125,133,134,135,137,159,177,187,191,195,197,205,208,209,215,218,219,221,222,223,226,228,229,230,231,232,234,235,236,237,238,239,],[-88,-15,-88,75,-88,-88,-88,-28,-88,-88,-82,-83,125,-25,-26,-27,-77,-84,-85,138,-16,158,-78,-79,-66,-76,-80,-81,-88,-71,201,-75,-88,-68,-69,-73,-88,222,-86,-72,-74,229,-19,-88,-67,-87,-17,234,-88,-88,-18,238,239,-70,-20,-21,]),'MINUS':([32,48,55,56,57,58,59,60,61,62,63,64,65,68,69,71,83,84,86,95,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,157,161,162,164,175,176,179,180,181,182,183,184,185,199,203,204,214,217,227,],[58,58,-55,100,-45,58,-48,58,-51,-52,-53,-54,58,58,58,58,58,58,100,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-49,-50,100,100,100,100,100,100,100,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,58,58,58,58,58,58,-56,58,-59,-60,100,58,100,100,-61,100,58,-58,100,]),'NOT':([32,48,58,60,65,68,69,71,83,84,95,97,99,100,101,102,103,104,105,106,107,108,109,110,157,161,162,164,175,176,180,184,214,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'INT_LITERAL':([32,48,58,60,65,68,69,71,83,84,95,97,99,100,101,102,103,104,105,106,107,108,109,110,157,161,162,164,175,176,180,184,214,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'TRUE':([32,48,58,60,65,68,69,71,83,84,95,97,99,100,101,102,103,104,105,106,107,108,109,110,157,161,162,164,175,176,180,184,214,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'FALSE':([32,48,58,60,65,68,69,71,83,84,95,97,99,100,101,102,103,104,105,106,107,108,109,110,157,161,162,164,175,176,180,184,214,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'STRING_LITERAL':([32,48,58,60,65,68,69,71,83,84,95,97,99,100,101,102,103,104,105,106,107,108,109,110,157,161,162,164,175,176,180,184,214,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'NEW':([32,48,58,60,65,68,69,71,83,84,95,97,99,100,101,102,103,104,105,106,107,108,109,110,157,161,162,164,175,176,180,184,214,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'LPAREN':([32,35,45,46,48,55,58,60,65,68,69,71,79,83,84,95,97,99,100,101,102,103,104,105,106,107,108,109,110,114,119,127,136,141,157,161,162,164,170,171,175,176,180,184,196,198,214,],[65,71,83,84,65,97,65,65,65,65,65,65,126,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,156,162,169,176,180,65,65,65,65,193,194,65,65,65,65,71,214,65,]),'EQUALS':([35,55,56,57,59,61,62,63,64,86,111,112,113,117,118,119,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,160,179,181,182,183,185,196,199,203,204,217,227,],[68,-55,103,-45,-48,-51,-52,-53,-54,103,-49,-50,103,103,103,161,103,103,103,103,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,184,-56,-59,-60,103,103,68,103,-61,103,-58,103,]),'TIMES':([55,57,59,61,62,63,64,111,112,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,203,217,],[-55,109,-48,-51,-52,-53,-54,-49,-50,-57,109,109,109,109,109,109,109,109,109,109,-46,-47,-62,-56,-59,-60,-61,-58,]),'DIVIDE':([55,57,59,61,62,63,64,111,112,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,203,217,],[-55,110,-48,-51,-52,-53,-54,-49,-50,-57,110,110,110,110,110,110,110,110,110,110,-46,-47,-62,-56,-59,-60,-61,-58,]),'PLUS':([55,56,57,59,61,62,63,64,86,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,185,199,203,204,217,227,],[-55,99,-45,-48,-51,-52,-53,-54,99,-49,-50,99,99,99,99,99,99,99,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,99,99,99,-61,99,-58,99,]),'AND':([55,56,57,59,61,62,63,64,86,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,185,199,203,204,217,227,],[-55,101,-45,-48,-51,-52,-53,-54,101,-49,-50,101,101,101,101,101,101,101,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,101,101,101,-61,101,-58,101,]),'OR':([55,56,57,59,61,62,63,64,86,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,185,199,203,204,217,227,],[-55,102,-45,-48,-51,-52,-53,-54,102,-49,-50,102,102,102,102,102,102,102,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,102,102,102,-61,102,-58,102,]),'NOT_EQUALS':([55,56,57,59,61,62,63,64,86,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,185,199,203,204,217,227,],[-55,104,-45,-48,-51,-52,-53,-54,104,-49,-50,104,104,104,104,104,104,104,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,104,104,104,-61,104,-58,104,]),'LESS_THAN':([55,56,57,59,61,62,63,64,86,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,185,199,203,204,217,227,],[-55,105,-45,-48,-51,-52,-53,-54,105,-49,-50,105,105,105,105,105,105,105,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,105,105,105,-61,105,-58,105,]),'LESS_THAN_OR_EQUAL':([55,56,57,59,61,62,63,64,86,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,185,199,203,204,217,227,],[-55,106,-45,-48,-51,-52,-53,-54,106,-49,-50,106,106,106,106,106,106,106,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,106,106,106,-61,106,-58,106,]),'GREATER_THAN':([55,56,57,59,61,62,63,64,86,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,185,199,203,204,217,227,],[-55,107,-45,-48,-51,-52,-53,-54,107,-49,-50,107,107,107,107,107,107,107,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,107,107,107,-61,107,-58,107,]),'GREATER_THAN_OR_EQUAL':([55,56,57,59,61,62,63,64,86,111,112,113,117,118,121,130,131,140,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,183,185,199,203,204,217,227,],[-55,108,-45,-48,-51,-52,-53,-54,108,-49,-50,108,108,108,108,108,108,108,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,108,108,108,-61,108,-58,108,]),'RPAREN':([55,57,59,61,62,63,64,71,97,111,112,113,120,121,122,126,130,131,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,164,166,168,169,176,179,180,181,182,186,188,189,192,193,194,200,202,203,207,211,212,217,220,227,],[-55,-45,-48,-51,-52,-53,-54,-88,-88,-49,-50,155,163,-63,-65,167,172,173,-57,181,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,182,-88,-88,190,-24,-88,-88,-56,-88,-59,-60,206,-64,-22,210,-88,-88,216,217,-61,-88,224,225,-58,-23,233,]),'COMMA':([55,57,59,61,62,63,64,111,112,121,141,143,144,145,146,147,148,149,150,151,152,153,154,155,179,181,182,189,203,217,],[-55,-45,-48,-51,-52,-53,-54,-49,-50,164,-57,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-46,-47,-62,-56,-59,-60,207,-61,-58,]),'ELSE':([72,73,87,88,89,123,124,125,133,134,135,159,187,195,197,205,215,218,219,226,228,237,],[-82,-83,-77,-84,-85,-78,-79,-66,-76,-80,-81,-71,-75,213,-69,-73,-86,-72,-74,-67,-87,-70,]),'OUT':([85,],[132,]),'MAIN':([129,],[171,]),'PRINTLN':([174,],[198,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'body_program':([0,3,4,5,],[2,19,20,21,]),'class_decl':([0,3,4,5,],[3,3,3,3,]),'import_decl':([0,3,4,5,],[4,4,4,4,]),'var_decl':([0,3,4,5,28,36,38,39,40,53,67,137,191,208,223,231,232,],[5,5,5,5,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'empty':([0,3,4,5,28,36,38,39,40,53,67,71,97,126,137,162,164,169,176,180,191,193,194,207,208,223,231,232,],[6,6,6,6,41,41,41,41,41,41,41,122,122,168,41,122,122,168,122,122,41,168,168,168,41,41,41,41,]),'access_modifier':([0,3,4,5,28,36,38,39,40,53,67,137,191,208,223,231,232,],[9,9,9,9,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'type':([0,3,4,5,28,36,38,39,40,43,53,67,81,126,137,169,191,193,194,207,208,223,231,232,],[11,11,11,11,42,42,42,42,42,80,42,42,128,165,42,165,42,165,165,165,42,42,42,42,]),'body':([28,36,38,39,40,53,67,137,191,208,223,231,232,],[37,74,76,77,78,92,116,177,209,221,230,235,236,]),'method_decl':([28,36,38,39,40,53,67,137,191,208,223,231,232,],[39,39,39,39,39,39,39,39,39,39,39,39,39,]),'statement':([28,36,38,39,40,53,67,137,172,173,191,208,213,223,231,232,],[40,40,40,40,40,40,40,40,195,197,40,40,226,40,40,40,]),'expr':([32,48,65,68,69,71,83,84,95,97,157,161,162,164,175,176,180,184,214,],[56,86,113,117,118,121,130,131,140,121,183,185,121,121,199,121,121,204,227,]),'term':([32,48,65,68,69,71,83,84,95,97,99,100,101,102,103,104,105,106,107,108,157,161,162,164,175,176,180,184,214,],[57,57,57,57,57,57,57,57,57,57,143,144,145,146,147,148,149,150,151,152,57,57,57,57,57,57,57,57,57,]),'factor':([32,48,58,60,65,68,69,71,83,84,95,97,99,100,101,102,103,104,105,106,107,108,109,110,157,161,162,164,175,176,180,184,214,],[59,59,111,112,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,153,154,59,59,59,59,59,59,59,59,59,]),'args':([71,97,162,164,176,180,],[120,142,186,188,200,202,]),'params':([126,169,193,194,207,],[166,192,211,212,220,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> body_program','program',1,'p_program','Parser.py',23),
  ('body_program -> class_decl body_program','body_program',2,'p_body_program','Parser.py',28),
  ('body_program -> import_decl body_program','body_program',2,'p_body_program','Parser.py',29),
  ('body_program -> var_decl body_program','body_program',2,'p_body_program','Parser.py',30),
  ('body_program -> empty','body_program',1,'p_body_program','Parser.py',31),
  ('class_decl -> CLASS ID EXTENDS ID LBRACE body RBRACE','class_decl',7,'p_class_decl','Parser.py',37),
  ('class_decl -> CLASS ID LBRACE body RBRACE','class_decl',5,'p_class_decl','Parser.py',38),
  ('class_decl -> access_modifier CLASS ID EXTENDS ID LBRACE body RBRACE','class_decl',8,'p_class_decl','Parser.py',39),
  ('class_decl -> access_modifier CLASS ID LBRACE body RBRACE','class_decl',6,'p_class_decl','Parser.py',40),
  ('access_modifier -> PUBLIC','access_modifier',1,'p_access_modifier','Parser.py',46),
  ('access_modifier -> PRIVATE','access_modifier',1,'p_access_modifier','Parser.py',47),
  ('access_modifier -> PROTECTED','access_modifier',1,'p_access_modifier','Parser.py',48),
  ('import_decl -> IMPORT ID DOT ID SEMICOLON','import_decl',5,'p_import_decl','Parser.py',54),
  ('import_decl -> IMPORT ID DOT ID DOT ID SEMICOLON','import_decl',7,'p_import_decl','Parser.py',55),
  ('var_decl -> type ID SEMICOLON','var_decl',3,'p_var_decl','Parser.py',61),
  ('var_decl -> type ID EQUAL expr SEMICOLON','var_decl',5,'p_var_decl','Parser.py',62),
  ('method_decl -> type ID LPAREN params RPAREN LBRACE body RBRACE','method_decl',8,'p_method_decl','Parser.py',68),
  ('method_decl -> access_modifier type ID LPAREN params RPAREN LBRACE body RBRACE','method_decl',9,'p_method_decl','Parser.py',69),
  ('method_decl -> type ID LPAREN RPAREN LBRACE body RBRACE','method_decl',7,'p_method_decl','Parser.py',70),
  ('method_decl -> access_modifier STATIC type ID LPAREN params RPAREN LBRACE body RBRACE','method_decl',10,'p_method_decl','Parser.py',71),
  ('method_decl -> PUBLIC STATIC VOID MAIN LPAREN params RPAREN LBRACE body RBRACE','method_decl',10,'p_method_decl','Parser.py',72),
  ('params -> type ID','params',2,'p_params','Parser.py',78),
  ('params -> type ID COMMA params','params',4,'p_params','Parser.py',79),
  ('params -> empty','params',1,'p_params','Parser.py',80),
  ('body -> var_decl body','body',2,'p_body','Parser.py',86),
  ('body -> method_decl body','body',2,'p_body','Parser.py',87),
  ('body -> statement body','body',2,'p_body','Parser.py',88),
  ('body -> empty','body',1,'p_body','Parser.py',89),
  ('type -> INT','type',1,'p_type','Parser.py',95),
  ('type -> BOOLEAN','type',1,'p_type','Parser.py',96),
  ('type -> STRING','type',1,'p_type','Parser.py',97),
  ('type -> ID','type',1,'p_type','Parser.py',98),
  ('type -> VOID','type',1,'p_type','Parser.py',99),
  ('type -> type LSQUARE RSQUARE','type',3,'p_type','Parser.py',100),
  ('expr -> expr PLUS term','expr',3,'p_expr','Parser.py',106),
  ('expr -> expr MINUS term','expr',3,'p_expr','Parser.py',107),
  ('expr -> expr AND term','expr',3,'p_expr','Parser.py',108),
  ('expr -> expr OR term','expr',3,'p_expr','Parser.py',109),
  ('expr -> expr EQUALS term','expr',3,'p_expr','Parser.py',110),
  ('expr -> expr NOT_EQUALS term','expr',3,'p_expr','Parser.py',111),
  ('expr -> expr LESS_THAN term','expr',3,'p_expr','Parser.py',112),
  ('expr -> expr LESS_THAN_OR_EQUAL term','expr',3,'p_expr','Parser.py',113),
  ('expr -> expr GREATER_THAN term','expr',3,'p_expr','Parser.py',114),
  ('expr -> expr GREATER_THAN_OR_EQUAL term','expr',3,'p_expr','Parser.py',115),
  ('expr -> term','expr',1,'p_expr','Parser.py',116),
  ('term -> term TIMES factor','term',3,'p_term','Parser.py',122),
  ('term -> term DIVIDE factor','term',3,'p_term','Parser.py',123),
  ('term -> factor','term',1,'p_term','Parser.py',124),
  ('factor -> MINUS factor','factor',2,'p_factor','Parser.py',130),
  ('factor -> NOT factor','factor',2,'p_factor','Parser.py',131),
  ('factor -> INT_LITERAL','factor',1,'p_factor','Parser.py',132),
  ('factor -> TRUE','factor',1,'p_factor','Parser.py',133),
  ('factor -> FALSE','factor',1,'p_factor','Parser.py',134),
  ('factor -> STRING_LITERAL','factor',1,'p_factor','Parser.py',135),
  ('factor -> ID','factor',1,'p_factor','Parser.py',136),
  ('factor -> ID LSQUARE expr RSQUARE','factor',4,'p_factor','Parser.py',137),
  ('factor -> ID DOT ID','factor',3,'p_factor','Parser.py',138),
  ('factor -> ID DOT ID LPAREN args RPAREN','factor',6,'p_factor','Parser.py',139),
  ('factor -> ID LPAREN args RPAREN','factor',4,'p_factor','Parser.py',140),
  ('factor -> NEW ID LPAREN RPAREN','factor',4,'p_factor','Parser.py',141),
  ('factor -> NEW INT LSQUARE expr RSQUARE','factor',5,'p_factor','Parser.py',142),
  ('factor -> LPAREN expr RPAREN','factor',3,'p_factor','Parser.py',143),
  ('args -> expr','args',1,'p_args','Parser.py',149),
  ('args -> expr COMMA args','args',3,'p_args','Parser.py',150),
  ('args -> empty','args',1,'p_args','Parser.py',151),
  ('statement -> LBRACE body RBRACE','statement',3,'p_statement','Parser.py',157),
  ('statement -> IF LPAREN expr RPAREN statement ELSE statement','statement',7,'p_statement','Parser.py',158),
  ('statement -> IF LPAREN expr RPAREN statement','statement',5,'p_statement','Parser.py',159),
  ('statement -> WHILE LPAREN expr RPAREN statement','statement',5,'p_statement','Parser.py',160),
  ('statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN expr RPAREN SEMICOLON','statement',9,'p_statement','Parser.py',161),
  ('statement -> ID EQUALS expr SEMICOLON','statement',4,'p_statement','Parser.py',162),
  ('statement -> ID LSQUARE expr RSQUARE EQUALS expr SEMICOLON','statement',7,'p_statement','Parser.py',163),
  ('statement -> ID DOT ID EQUALS expr SEMICOLON','statement',6,'p_statement','Parser.py',164),
  ('statement -> ID DOT ID LPAREN args RPAREN SEMICOLON','statement',7,'p_statement','Parser.py',165),
  ('statement -> ID LPAREN args RPAREN SEMICOLON','statement',5,'p_statement','Parser.py',166),
  ('statement -> RETURN expr SEMICOLON','statement',3,'p_statement','Parser.py',167),
  ('statement -> RETURN SEMICOLON','statement',2,'p_statement','Parser.py',168),
  ('statement -> ID PLUS_PLUS SEMICOLON','statement',3,'p_statement','Parser.py',169),
  ('statement -> ID MINUS_MINUS SEMICOLON','statement',3,'p_statement','Parser.py',170),
  ('statement -> PLUS_PLUS ID SEMICOLON','statement',3,'p_statement','Parser.py',171),
  ('statement -> MINUS_MINUS ID SEMICOLON','statement',3,'p_statement','Parser.py',172),
  ('statement -> ID PLUS_PLUS','statement',2,'p_statement','Parser.py',173),
  ('statement -> ID MINUS_MINUS','statement',2,'p_statement','Parser.py',174),
  ('statement -> PLUS_PLUS ID','statement',2,'p_statement','Parser.py',175),
  ('statement -> MINUS_MINUS ID','statement',2,'p_statement','Parser.py',176),
  ('statement -> THIS DOT ID EQUAL expr SEMICOLON','statement',6,'p_statement','Parser.py',177),
  ('statement -> THIS DOT ID LPAREN args RPAREN SEMICOLON','statement',7,'p_statement','Parser.py',178),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',183),
]
